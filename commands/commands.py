# F’{}’ – добавляет переменную в строку
# ‘{} {} {}’.format(a, b, c) – добавляет переменные в строку
# Print()- вывести значение в терминал
# Type – выводит в терминал тип данных переменной 
# Если в строке, выводимый в терминал есть одинарная ковычка, то перед ней нудно ставить /, две двойные ковычки и так выводятся в терминал.
# # в начале строки не выводит эту сроку в терминал
# “”” перед выборкой строк и в конце не выводит эти строки в терминал
# Input – ввод данных (запрашивает значение в терминале)
# Round (переменная, число знаков после запятой) – округление числа
# Range(начальное значение, последнее значение, шаг) – выдаёт значения из диапозона
# Len – выводит размер строки
# Print (‘x’ in text) – true or false, выводит, есть ли символ из первого аргумента в строке
# Print (x. lower()) – переводит всё в нижний регистр (upper – в верхний)
# Print (x. replace (e , z))- меняет в x e на z
# Print (x[y:z]) – выводит символы строки начиная со значения y до значения z (как range)
# List.append(x) – добавляет в конец списка аргумент 
# List.pop(x) – удаляет элемент из списка с номером аргумента. Возвращает значение удалённого элемента
# List.insert(x,y)- меняет элемент из списка на позиции x на элемент y
# Dictionary.items – возвращает значения словаря вместе с их ключом в виде кортежей
# Set.name(x) – проверяет, есть ли во множестве аргумент x и удаляет его
# Set()- создаёт пустое множество
# List() – создаёт пустой список
# Frozenset – замораживает множество
# Exp for item in iterable – генерация списка 
# List.append – добавляет элемент в список

# Коллекции данных:
# Списки – это упорядоченный конечный набор элементов. Элементы с любым типом данных. Индексация с нуля, отрицательный индекс перебирает элементы в обратную сторону. 
# List1 = [] – создание пустого списка
# List1 = list() – создание пустого списка
# List1 = [1,2,3,4,5,6] – пример создания списка 
# List1.append(x) – добавляет элемент x в конец списка 
# List1.pop(x) – удаляет последний элемент в списке с индексом x. При отсутствии аргумента удаляет последний элемент. Возвращает удалённый элемент
# List.insert(x,y) – добавляет в список элемент y на позицию x.
# List.count(x) – возвращает количество значений x в списке.
# List.remove(x) - удаляет элемент x из списка

# Кортеж – это неизменяемый список. Занимают меньше памяти и работают быстрее в сравнении со списком. Тип данных кортежей tuple. После каждого элемента обязательно должна стоять запятая. 
# T = () – создание пустого кортежа
# T = (1, 2, 3, 4,) – пример создания кортежа
# T = tuple() – создание пустого кортежа


# Словари – неупорядоченные коллекции произвольных объектов с доступом по ключу. В списках в качестве ключа используется индекс элемента, в словарях же для определения элемента используется значение ключа (строка, число)
# Dictionary = {} – создание пустого словаря
# Dictionary = dict() – создание пустого словаря
# Dictionary = {‘up’ : ‘вверх’, ‘left’ : ‘влево’, ‘right’ : ‘вправо’, ‘down’ : ‘вниз’, 895 : 12345} – пример создания словаря.
# Dictionary.items – возвращает пары элемент – ключ в виде кортежей.
# Dictionary.values- возвращает только значения в словаре
# В качестве ключа можно использовать только неизменяемый тип данных. Если в словаре будет два одинаковых ключа, то будет возвращаться только ключ, который идёт позднее. 

# Множества – коллекции уникальных неупорядоченных элементов. Может содержать элементы любых типов.
# Set1 = set() – создание пустого множества. 
# Set1 = {1, 2, 3, 4, 5} – пример создания множества
# Set1.add(x) – добавляет элемент во множество
# Set1.remove(x) – удаляет элемент x из списка. 
# Set1.discard(x) – проверяет наличие элемента x и удаляет его 
# Set1.clear() – удаляет все элементы из множества 
# Set1.copy() – копирует множество set1
# # c = a.copy() #копирует элементы множества # 
# р = a.union(b) # объединяет множества, оставляю только уникальные значения # 
# i = a.intersection(b) # пересечние, находит элементы, которые есть в обоих множествах # 
# k = a.difference(b) # вычитает множество b из множества a # 
# k1 = b.difference(a) # вычитает множество b из множества a # 
# frozenset(set1) – замораживает множество, то есть отключает возможность менять его.

# Генератор списков
# Одна из культовых фишек python. Упрощенных подход к созданию списка, который задействует цикл for, а также инструкции if-else для определения того, что окажется в финальном списке  
# List1 = [x for items in iterable] – создаёт список, в который добавляет элементы x
# Возможно добавлять условия:
# List1 = [i for i in range(10) if i%2 ==0] – создаёт список чётных значений от 0 до 10 
# end = ' '- с помощью этой функции можно указать, что будет добавляться к значению по окончании каждой итерации цикла
# dict.get(x,y) – проверяет, есть ключ x в словаре, в случае его наличия возвращает значение, соответствующее этому ключу, в обратном случае возвращает y
# print(*set1) - выводит множество в терминал без скобок и запятых

# функции, модули, рекурсия 

# def(*x) - * указывает, что функции передаётся неограниченное количество аргументов
# def - функция
# import - импортирует модуль из другого файла. Сам модуль используется через команду обращения к нему и функции, зположенной в нем- module.max(x)
# from module1 import function - сразу импортирует функцию при обращении к модулю 
# from module1 import * - импортирует все функции из модуля 
# import module1 as m1 - импортирует модуль, меняя его название 


